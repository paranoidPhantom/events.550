

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
begin
  insert into public.profiles (id)
  values (new.id);
  return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."cast-options" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "author" "text" NOT NULL,
    "image_urls" "text"[] NOT NULL
);


ALTER TABLE "public"."cast-options" OWNER TO "postgres";


COMMENT ON TABLE "public"."cast-options" IS 'Entities that people can vote for';



ALTER TABLE "public"."cast-options" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."cast-options_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."casts" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "selection_1" bigint,
    "selection_2" bigint,
    "selection_3" bigint,
    "ip_extracted" "text"
);


ALTER TABLE "public"."casts" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."event-config" (
    "event" "text" NOT NULL,
    "vk_stream_channel" "text",
    "vk_stream_shown" boolean DEFAULT false NOT NULL,
    "voting_open" boolean DEFAULT false NOT NULL,
    "logo_url" "text",
    "restricted" boolean DEFAULT true NOT NULL,
    "name" "text",
    "description" "text",
    "cover_url" "text"
);


ALTER TABLE "public"."event-config" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."fake-identities" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "grade" "text" NOT NULL,
    "restricted" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."fake-identities" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."identities" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "grade" "text" NOT NULL,
    "restricted" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."identities" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "perms" "text"[] DEFAULT '{}'::"text"[] NOT NULL
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."timelines" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "event" "text" NOT NULL,
    "step" bigint DEFAULT '0'::bigint NOT NULL,
    "cues" "jsonb"[] DEFAULT '{}'::"jsonb"[] NOT NULL
);


ALTER TABLE "public"."timelines" OWNER TO "postgres";


ALTER TABLE "public"."timelines" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."timelines_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."cast-options"
    ADD CONSTRAINT "cast-options_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."casts"
    ADD CONSTRAINT "casts_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."event-config"
    ADD CONSTRAINT "event-config_pkey" PRIMARY KEY ("event");



ALTER TABLE ONLY "public"."fake-identities"
    ADD CONSTRAINT "fake-identities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."identities"
    ADD CONSTRAINT "identities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."timelines"
    ADD CONSTRAINT "timelines_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."casts"
    ADD CONSTRAINT "casts_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."identities"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."casts"
    ADD CONSTRAINT "casts_selection_1_fkey" FOREIGN KEY ("selection_1") REFERENCES "public"."cast-options"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."casts"
    ADD CONSTRAINT "casts_selection_2_fkey" FOREIGN KEY ("selection_2") REFERENCES "public"."cast-options"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."casts"
    ADD CONSTRAINT "casts_selection_3_fkey" FOREIGN KEY ("selection_3") REFERENCES "public"."cast-options"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."timelines"
    ADD CONSTRAINT "timelines_event_fkey" FOREIGN KEY ("event") REFERENCES "public"."event-config"("event") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."cast-options" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."event-config" FOR SELECT USING (("restricted" = false));



CREATE POLICY "Enable read access for all users" ON "public"."timelines" FOR SELECT USING (true);



CREATE POLICY "Policy with security definer functions" ON "public"."event-config" TO "authenticated" USING (true);



ALTER TABLE "public"."cast-options" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."casts" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."event-config" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."fake-identities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."identities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."timelines" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."casts";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."event-config";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."timelines";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";


















GRANT ALL ON TABLE "public"."cast-options" TO "anon";
GRANT ALL ON TABLE "public"."cast-options" TO "authenticated";
GRANT ALL ON TABLE "public"."cast-options" TO "service_role";



GRANT ALL ON SEQUENCE "public"."cast-options_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."cast-options_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."cast-options_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."casts" TO "anon";
GRANT ALL ON TABLE "public"."casts" TO "authenticated";
GRANT ALL ON TABLE "public"."casts" TO "service_role";



GRANT ALL ON TABLE "public"."event-config" TO "anon";
GRANT ALL ON TABLE "public"."event-config" TO "authenticated";
GRANT ALL ON TABLE "public"."event-config" TO "service_role";



GRANT ALL ON TABLE "public"."fake-identities" TO "anon";
GRANT ALL ON TABLE "public"."fake-identities" TO "authenticated";
GRANT ALL ON TABLE "public"."fake-identities" TO "service_role";



GRANT ALL ON TABLE "public"."identities" TO "anon";
GRANT ALL ON TABLE "public"."identities" TO "authenticated";
GRANT ALL ON TABLE "public"."identities" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."timelines" TO "anon";
GRANT ALL ON TABLE "public"."timelines" TO "authenticated";
GRANT ALL ON TABLE "public"."timelines" TO "service_role";



GRANT ALL ON SEQUENCE "public"."timelines_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."timelines_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."timelines_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
